-- Gui setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AutoJoinUI"
ScreenGui.Parent = game:GetService("CoreGui")

-- Main Frame (Menu chính)
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 180, 0, 90)
MainFrame.Position = UDim2.new(0.5, -90, 0.4, -45)
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 10)
MainCorner.Parent = MainFrame

-- Toggle AutoJoin
local AutoJoinEnabled = false
local Toggle = Instance.new("TextButton")
Toggle.Size = UDim2.new(1, -20, 0, 22)
Toggle.Position = UDim2.new(0, 10, 0, 8)
Toggle.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
Toggle.Text = "Auto Join: OFF"
Toggle.TextColor3 = Color3.fromRGB(255, 100, 100)
Toggle.Font = Enum.Font.GothamBold
Toggle.TextSize = 11
Toggle.Parent = MainFrame

Toggle.MouseButton1Click:Connect(function()
    AutoJoinEnabled = not AutoJoinEnabled
    Toggle.Text = "Auto Join: " .. (AutoJoinEnabled and "ON" or "OFF")
    Toggle.TextColor3 = AutoJoinEnabled and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(255, 100, 100)
end)

-- Min M/s Label & TextBox
local HttpService = game:GetService("HttpService")
local hwid = "unknown_hwid"
pcall(function()
    hwid = game:GetService("RbxAnalyticsService"):GetClientId()
end)

local cfgFile = "autojoin_"..hwid..".json"

local function loadConfig()
    if isfile and isfile(cfgFile) then
        local success, data = pcall(function()
            return HttpService:JSONDecode(readfile(cfgFile))
        end)
        if success and type(data) == "table" then
            return data
        end
    end
    return { MinMS = 1000000 }
end

local function saveConfig(cfg)
    if writefile then
        writefile(cfgFile, HttpService:JSONEncode(cfg))
    end
end

local config = loadConfig()
local MinMS = config.MinMS or 1000000

local function formatMoney(num)
    return string.format("%.1fM", num / 1000000)
end

local function parseInput(str)
    local num = tonumber(str)
    if num then
        return math.clamp(num * 1000000, 1000000, 10000000)
    end
    return nil
end

local MinLabel = Instance.new("TextLabel")
MinLabel.Size = UDim2.new(1, -20, 0, 16)
MinLabel.Position = UDim2.new(0, 10, 0, 33)
MinLabel.BackgroundTransparency = 1
MinLabel.Text = "Min M/s: " .. formatMoney(MinMS)
MinLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
MinLabel.Font = Enum.Font.Gotham
MinLabel.TextSize = 10
MinLabel.Parent = MainFrame

local MinBox = Instance.new("TextBox")
MinBox.Size = UDim2.new(1, -20, 0, 16)
MinBox.Position = UDim2.new(0, 10, 0, 50)
MinBox.BackgroundColor3 = Color3.fromRGB(50, 50, 70)
MinBox.Text = tostring(MinMS/1000000)
MinBox.TextColor3 = Color3.fromRGB(255, 255, 255)
MinBox.Font = Enum.Font.Gotham
MinBox.TextSize = 10
MinBox.ClearTextOnFocus = false
MinBox.Parent = MainFrame

MinBox.FocusLost:Connect(function()
    local val = parseInput(MinBox.Text)
    if val then
        MinMS = val
        MinLabel.Text = "Min M/s: " .. formatMoney(val)
        saveConfig({ MinMS = MinMS })
        MinBox.Text = tostring(MinMS/1000000)
    else
        MinBox.Text = tostring(MinMS/1000000)
    end
end)

-- Status Label
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, -20, 0, 16)
StatusLabel.Position = UDim2.new(0, 10, 0, 70)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Status: Idle"
StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.TextSize = 10
StatusLabel.TextXAlignment = Enum.TextXAlignment.Left
StatusLabel.Parent = MainFrame

-- Nút tròn thu/phóng (di chuyển được riêng)
local ResizeButton = Instance.new("TextButton")
ResizeButton.Size = UDim2.new(0, 25, 0, 25)
ResizeButton.Position = UDim2.new(0.5, -12, 0.7, 0)
ResizeButton.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
ResizeButton.Text = "+"
ResizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ResizeButton.Font = Enum.Font.GothamBold
ResizeButton.TextSize = 14
ResizeButton.Parent = ScreenGui

local ResizeCorner = Instance.new("UICorner")
ResizeCorner.CornerRadius = UDim.new(0, 25)
ResizeCorner.Parent = ResizeButton

ResizeButton.Active = true
ResizeButton.Draggable = true

local Minimized = false
ResizeButton.MouseButton1Click:Connect(function()
    if Minimized then
        MainFrame.Visible = true
        Minimized = false
        ResizeButton.Text = "-"
    else
        MainFrame.Visible = false
        Minimized = true
        ResizeButton.Text = "+"
    end
end)

-- WebSocket
if not WebSocket then
    warn("Your executor does not support WebSocket.")
    return
end

local ws, err = WebSocket.connect("ws://5.255.97.147:6767/script")
if not ws then
    warn("WebSocket Error:", tostring(err))
    return
end

local function parseMoney(str)
    if not str then return 0 end
    local num, suffix = str:match("(%d+%.?%d*)([MK]?)")
    num = tonumber(num)
    if not num then return 0 end

    if suffix == "M" then
        return num * 1000000
    elseif suffix == "K" then
        return num * 1000
    else
        return num
    end
end

ws.OnMessage:Connect(function(msg)
    local success, data = pcall(function()
        return HttpService:JSONDecode(msg)
    end)
    if not success or type(data) ~= "table" then return end

    if AutoJoinEnabled and data.type == "server_update" and data.data and data.data.join_script then
        local moneyStr = data.data.money or "$0/s"
        local moneyVal = parseMoney(moneyStr)

        if moneyVal >= MinMS then
            StatusLabel.Text = "[AutoJoin] Joining: "..moneyStr
            local func, err = loadstring(data.data.join_script)
            if func then
                pcall(func)
            else
                StatusLabel.Text = "[AutoJoin] Failed to load"
                warn("Failed to load join script:", err)
            end
        else
            StatusLabel.Text = "[AutoJoin] Skipped: "..moneyStr.." < "..formatMoney(MinMS)
        end
    end
end)
